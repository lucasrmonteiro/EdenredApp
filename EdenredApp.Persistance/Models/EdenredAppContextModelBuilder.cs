// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace EdenredApp.Persistance.Models
{
    public partial class EdenredAppContextModel
    {
        partial void Initialize()
        {
            var balanceAED = BalanceAEDEntityType.Create(this);
            var beneficiary = BeneficiaryEntityType.Create(this);
            var user = UserEntityType.Create(this);

            BalanceAEDEntityType.CreateForeignKey1(balanceAED, beneficiary);
            BeneficiaryEntityType.CreateForeignKey1(beneficiary, user);

            BalanceAEDEntityType.CreateAnnotations(balanceAED);
            BeneficiaryEntityType.CreateAnnotations(beneficiary);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var balanceAED = FindEntityType("EdenredApp.Domain.Entity.BalanceAED")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            balanceAED.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var edenredAppDomainEntityBalanceAEDTableBase = new TableBase("EdenredApp.Domain.Entity.BalanceAED", null, relationalModel);
            var amountColumnBase = new ColumnBase<ColumnMappingBase>("Amount", "double precision", edenredAppDomainEntityBalanceAEDTableBase);
            edenredAppDomainEntityBalanceAEDTableBase.Columns.Add("Amount", amountColumnBase);
            var beneficiaryIdColumnBase = new ColumnBase<ColumnMappingBase>("BeneficiaryId", "uuid", edenredAppDomainEntityBalanceAEDTableBase);
            edenredAppDomainEntityBalanceAEDTableBase.Columns.Add("BeneficiaryId", beneficiaryIdColumnBase);
            var createdDateColumnBase = new ColumnBase<ColumnMappingBase>("CreatedDate", "timestamp with time zone", edenredAppDomainEntityBalanceAEDTableBase);
            edenredAppDomainEntityBalanceAEDTableBase.Columns.Add("CreatedDate", createdDateColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uuid", edenredAppDomainEntityBalanceAEDTableBase);
            edenredAppDomainEntityBalanceAEDTableBase.Columns.Add("Id", idColumnBase);
            var modifiedDateColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedDate", "timestamp with time zone", edenredAppDomainEntityBalanceAEDTableBase);
            edenredAppDomainEntityBalanceAEDTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase);
            relationalModel.DefaultTables.Add("EdenredApp.Domain.Entity.BalanceAED", edenredAppDomainEntityBalanceAEDTableBase);
            var edenredAppDomainEntityBalanceAEDMappingBase = new TableMappingBase<ColumnMappingBase>(balanceAED, edenredAppDomainEntityBalanceAEDTableBase, true);
            edenredAppDomainEntityBalanceAEDTableBase.AddTypeMapping(edenredAppDomainEntityBalanceAEDMappingBase, false);
            defaultTableMappings.Add(edenredAppDomainEntityBalanceAEDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, balanceAED.FindProperty("Id")!, edenredAppDomainEntityBalanceAEDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amountColumnBase, balanceAED.FindProperty("Amount")!, edenredAppDomainEntityBalanceAEDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)beneficiaryIdColumnBase, balanceAED.FindProperty("BeneficiaryId")!, edenredAppDomainEntityBalanceAEDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase, balanceAED.FindProperty("CreatedDate")!, edenredAppDomainEntityBalanceAEDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase, balanceAED.FindProperty("ModifiedDate")!, edenredAppDomainEntityBalanceAEDMappingBase);

            var tableMappings = new List<TableMapping>();
            balanceAED.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var balanceAEDTable = new Table("BalanceAED", null, relationalModel);
            var idColumn = new Column("Id", "uuid", balanceAEDTable);
            balanceAEDTable.Columns.Add("Id", idColumn);
            var amountColumn = new Column("Amount", "double precision", balanceAEDTable);
            balanceAEDTable.Columns.Add("Amount", amountColumn);
            var beneficiaryIdColumn = new Column("BeneficiaryId", "uuid", balanceAEDTable);
            balanceAEDTable.Columns.Add("BeneficiaryId", beneficiaryIdColumn);
            var createdDateColumn = new Column("CreatedDate", "timestamp with time zone", balanceAEDTable);
            balanceAEDTable.Columns.Add("CreatedDate", createdDateColumn);
            var modifiedDateColumn = new Column("ModifiedDate", "timestamp with time zone", balanceAEDTable);
            balanceAEDTable.Columns.Add("ModifiedDate", modifiedDateColumn);
            var pK_BalanceAED = new UniqueConstraint("PK_BalanceAED", balanceAEDTable, new[] { idColumn });
            balanceAEDTable.PrimaryKey = pK_BalanceAED;
            var pK_BalanceAEDUc = RelationalModel.GetKey(this,
                "EdenredApp.Domain.Entity.BalanceAED",
                new[] { "Id" });
            pK_BalanceAED.MappedKeys.Add(pK_BalanceAEDUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BalanceAEDUc).Add(pK_BalanceAED);
            balanceAEDTable.UniqueConstraints.Add("PK_BalanceAED", pK_BalanceAED);
            var iX_BalanceAED_BeneficiaryId = new TableIndex(
            "IX_BalanceAED_BeneficiaryId", balanceAEDTable, new[] { beneficiaryIdColumn }, false);
            var iX_BalanceAED_BeneficiaryIdIx = RelationalModel.GetIndex(this,
                "EdenredApp.Domain.Entity.BalanceAED",
                new[] { "BeneficiaryId" });
            iX_BalanceAED_BeneficiaryId.MappedIndexes.Add(iX_BalanceAED_BeneficiaryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_BalanceAED_BeneficiaryIdIx).Add(iX_BalanceAED_BeneficiaryId);
            balanceAEDTable.Indexes.Add("IX_BalanceAED_BeneficiaryId", iX_BalanceAED_BeneficiaryId);
            relationalModel.Tables.Add(("BalanceAED", null), balanceAEDTable);
            var balanceAEDTableMapping = new TableMapping(balanceAED, balanceAEDTable, true);
            balanceAEDTable.AddTypeMapping(balanceAEDTableMapping, false);
            tableMappings.Add(balanceAEDTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, balanceAED.FindProperty("Id")!, balanceAEDTableMapping);
            RelationalModel.CreateColumnMapping(amountColumn, balanceAED.FindProperty("Amount")!, balanceAEDTableMapping);
            RelationalModel.CreateColumnMapping(beneficiaryIdColumn, balanceAED.FindProperty("BeneficiaryId")!, balanceAEDTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn, balanceAED.FindProperty("CreatedDate")!, balanceAEDTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn, balanceAED.FindProperty("ModifiedDate")!, balanceAEDTableMapping);

            var beneficiary = FindEntityType("EdenredApp.Domain.Entity.Beneficiary")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            beneficiary.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var edenredAppDomainEntityBeneficiaryTableBase = new TableBase("EdenredApp.Domain.Entity.Beneficiary", null, relationalModel);
            var createdDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedDate", "timestamp with time zone", edenredAppDomainEntityBeneficiaryTableBase);
            edenredAppDomainEntityBeneficiaryTableBase.Columns.Add("CreatedDate", createdDateColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uuid", edenredAppDomainEntityBeneficiaryTableBase);
            edenredAppDomainEntityBeneficiaryTableBase.Columns.Add("Id", idColumnBase0);
            var modifiedDateColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "timestamp with time zone", edenredAppDomainEntityBeneficiaryTableBase);
            edenredAppDomainEntityBeneficiaryTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase0);
            var nickNameColumnBase = new ColumnBase<ColumnMappingBase>("NickName", "character varying(20)", edenredAppDomainEntityBeneficiaryTableBase);
            edenredAppDomainEntityBeneficiaryTableBase.Columns.Add("NickName", nickNameColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "uuid", edenredAppDomainEntityBeneficiaryTableBase);
            edenredAppDomainEntityBeneficiaryTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("EdenredApp.Domain.Entity.Beneficiary", edenredAppDomainEntityBeneficiaryTableBase);
            var edenredAppDomainEntityBeneficiaryMappingBase = new TableMappingBase<ColumnMappingBase>(beneficiary, edenredAppDomainEntityBeneficiaryTableBase, true);
            edenredAppDomainEntityBeneficiaryTableBase.AddTypeMapping(edenredAppDomainEntityBeneficiaryMappingBase, false);
            defaultTableMappings0.Add(edenredAppDomainEntityBeneficiaryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, beneficiary.FindProperty("Id")!, edenredAppDomainEntityBeneficiaryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase0, beneficiary.FindProperty("CreatedDate")!, edenredAppDomainEntityBeneficiaryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase0, beneficiary.FindProperty("ModifiedDate")!, edenredAppDomainEntityBeneficiaryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nickNameColumnBase, beneficiary.FindProperty("NickName")!, edenredAppDomainEntityBeneficiaryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, beneficiary.FindProperty("UserId")!, edenredAppDomainEntityBeneficiaryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            beneficiary.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var beneficiariesTable = new Table("Beneficiaries", null, relationalModel);
            var idColumn0 = new Column("Id", "uuid", beneficiariesTable);
            beneficiariesTable.Columns.Add("Id", idColumn0);
            var createdDateColumn0 = new Column("CreatedDate", "timestamp with time zone", beneficiariesTable);
            beneficiariesTable.Columns.Add("CreatedDate", createdDateColumn0);
            var modifiedDateColumn0 = new Column("ModifiedDate", "timestamp with time zone", beneficiariesTable);
            beneficiariesTable.Columns.Add("ModifiedDate", modifiedDateColumn0);
            var nickNameColumn = new Column("NickName", "character varying(20)", beneficiariesTable);
            beneficiariesTable.Columns.Add("NickName", nickNameColumn);
            var userIdColumn = new Column("UserId", "uuid", beneficiariesTable);
            beneficiariesTable.Columns.Add("UserId", userIdColumn);
            var pK_Beneficiaries = new UniqueConstraint("PK_Beneficiaries", beneficiariesTable, new[] { idColumn0 });
            beneficiariesTable.PrimaryKey = pK_Beneficiaries;
            var pK_BeneficiariesUc = RelationalModel.GetKey(this,
                "EdenredApp.Domain.Entity.Beneficiary",
                new[] { "Id" });
            pK_Beneficiaries.MappedKeys.Add(pK_BeneficiariesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BeneficiariesUc).Add(pK_Beneficiaries);
            beneficiariesTable.UniqueConstraints.Add("PK_Beneficiaries", pK_Beneficiaries);
            var iX_Beneficiaries_UserId = new TableIndex(
            "IX_Beneficiaries_UserId", beneficiariesTable, new[] { userIdColumn }, false);
            var iX_Beneficiaries_UserIdIx = RelationalModel.GetIndex(this,
                "EdenredApp.Domain.Entity.Beneficiary",
                new[] { "UserId" });
            iX_Beneficiaries_UserId.MappedIndexes.Add(iX_Beneficiaries_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Beneficiaries_UserIdIx).Add(iX_Beneficiaries_UserId);
            beneficiariesTable.Indexes.Add("IX_Beneficiaries_UserId", iX_Beneficiaries_UserId);
            relationalModel.Tables.Add(("Beneficiaries", null), beneficiariesTable);
            var beneficiariesTableMapping = new TableMapping(beneficiary, beneficiariesTable, true);
            beneficiariesTable.AddTypeMapping(beneficiariesTableMapping, false);
            tableMappings0.Add(beneficiariesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, beneficiary.FindProperty("Id")!, beneficiariesTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn0, beneficiary.FindProperty("CreatedDate")!, beneficiariesTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn0, beneficiary.FindProperty("ModifiedDate")!, beneficiariesTableMapping);
            RelationalModel.CreateColumnMapping(nickNameColumn, beneficiary.FindProperty("NickName")!, beneficiariesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, beneficiary.FindProperty("UserId")!, beneficiariesTableMapping);

            var user = FindEntityType("EdenredApp.Domain.Entity.User")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var edenredAppDomainEntityUserTableBase = new TableBase("EdenredApp.Domain.Entity.User", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("Code", "bigint", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("Code", codeColumnBase);
            var createdDateColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedDate", "timestamp with time zone", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("CreatedDate", createdDateColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uuid", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("Id", idColumnBase1);
            var modifiedDateColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "timestamp with time zone", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase1);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("Name", nameColumnBase);
            var verifiedColumnBase = new ColumnBase<ColumnMappingBase>("Verified", "boolean", edenredAppDomainEntityUserTableBase);
            edenredAppDomainEntityUserTableBase.Columns.Add("Verified", verifiedColumnBase);
            relationalModel.DefaultTables.Add("EdenredApp.Domain.Entity.User", edenredAppDomainEntityUserTableBase);
            var edenredAppDomainEntityUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, edenredAppDomainEntityUserTableBase, true);
            edenredAppDomainEntityUserTableBase.AddTypeMapping(edenredAppDomainEntityUserMappingBase, false);
            defaultTableMappings1.Add(edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, user.FindProperty("Id")!, edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, user.FindProperty("Code")!, edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase1, user.FindProperty("CreatedDate")!, edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase1, user.FindProperty("ModifiedDate")!, edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, user.FindProperty("Name")!, edenredAppDomainEntityUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)verifiedColumnBase, user.FindProperty("Verified")!, edenredAppDomainEntityUserMappingBase);

            var tableMappings1 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn1 = new Column("Id", "uuid", usersTable);
            usersTable.Columns.Add("Id", idColumn1);
            var codeColumn = new Column("Code", "bigint", usersTable);
            usersTable.Columns.Add("Code", codeColumn);
            var createdDateColumn1 = new Column("CreatedDate", "timestamp with time zone", usersTable);
            usersTable.Columns.Add("CreatedDate", createdDateColumn1);
            var modifiedDateColumn1 = new Column("ModifiedDate", "timestamp with time zone", usersTable);
            usersTable.Columns.Add("ModifiedDate", modifiedDateColumn1);
            var nameColumn = new Column("Name", "text", usersTable);
            usersTable.Columns.Add("Name", nameColumn);
            var verifiedColumn = new Column("Verified", "boolean", usersTable);
            usersTable.Columns.Add("Verified", verifiedColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn1 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "EdenredApp.Domain.Entity.User",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings1.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, user.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, user.FindProperty("Code")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn1, user.FindProperty("CreatedDate")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn1, user.FindProperty("ModifiedDate")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, user.FindProperty("Name")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(verifiedColumn, user.FindProperty("Verified")!, usersTableMapping);
            var fK_BalanceAED_Beneficiaries_BeneficiaryId = new ForeignKeyConstraint(
                "FK_BalanceAED_Beneficiaries_BeneficiaryId", balanceAEDTable, beneficiariesTable,
                new[] { beneficiaryIdColumn },
                beneficiariesTable.FindUniqueConstraint("PK_Beneficiaries")!, ReferentialAction.Cascade);
            var fK_BalanceAED_Beneficiaries_BeneficiaryIdFk = RelationalModel.GetForeignKey(this,
                "EdenredApp.Domain.Entity.BalanceAED",
                new[] { "BeneficiaryId" },
                "EdenredApp.Domain.Entity.Beneficiary",
                new[] { "Id" });
            fK_BalanceAED_Beneficiaries_BeneficiaryId.MappedForeignKeys.Add(fK_BalanceAED_Beneficiaries_BeneficiaryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BalanceAED_Beneficiaries_BeneficiaryIdFk).Add(fK_BalanceAED_Beneficiaries_BeneficiaryId);
            balanceAEDTable.ForeignKeyConstraints.Add(fK_BalanceAED_Beneficiaries_BeneficiaryId);
            beneficiariesTable.ReferencingForeignKeyConstraints.Add(fK_BalanceAED_Beneficiaries_BeneficiaryId);
            var fK_Beneficiaries_Users_UserId = new ForeignKeyConstraint(
                "FK_Beneficiaries_Users_UserId", beneficiariesTable, usersTable,
                new[] { userIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Beneficiaries_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "EdenredApp.Domain.Entity.Beneficiary",
                new[] { "UserId" },
                "EdenredApp.Domain.Entity.User",
                new[] { "Id" });
            fK_Beneficiaries_Users_UserId.MappedForeignKeys.Add(fK_Beneficiaries_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Beneficiaries_Users_UserIdFk).Add(fK_Beneficiaries_Users_UserId);
            beneficiariesTable.ForeignKeyConstraints.Add(fK_Beneficiaries_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Beneficiaries_Users_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
